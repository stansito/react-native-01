import React, { useState, useEffect, useRef } from 'react';
import { View, Text, TextInput, StyleSheet, Animated, PanResponder, TouchableOpacity } from 'react-native';
import WheelPicker from 'react-native-wheely';
import { MaterialIcons } from '@expo/vector-icons';

const Serie = ({ index, reps, weight, onChange, onDelete }) => {
    const [localReps, setLocalReps] = useState(reps);
    const [localWeight, setLocalWeight] = useState(weight);
    const cantidadRepeticiones = [...Array(51).keys()];
    const pan = useRef(new Animated.ValueXY()).current;
    const [isInteracting, setIsInteracting] = useState(false);

    const panResponder = useRef(
        PanResponder.create({
            onMoveShouldSetPanResponder: (evt, gestureState) => !isInteracting,
            onPanResponderMove: Animated.event([null, { dx: pan.x }], { useNativeDriver: false }),
            onPanResponderRelease: (evt, gestureState) => {
                if (gestureState.dx < -100) {
                    Animated.timing(pan, {
                        toValue: { x: -200, y: 0 },
                        duration: 200,
                        useNativeDriver: false,
                    }).start(() => onDelete(index));
                } else {
                    Animated.spring(pan, {
                        toValue: { x: 0, y: 0 },
                        useNativeDriver: false,
                    }).start();
                }
            },
        })
    ).current;

    useEffect(() => {
        onChange(index, localReps, localWeight);
    }, [localReps, localWeight]);

    return (
        <Animated.View style={[styles.serieContainer, pan.getLayout()]} {...panResponder.panHandlers}>
            <Text style={styles.serieTitle}>Serie {index + 1}</Text>
            <View
                onTouchStart={() => setIsInteracting(true)}
                onTouchEnd={() => setIsInteracting(false)}
            >
                <WheelPicker
                    selectedIndex={localReps}
                    options={cantidadRepeticiones}
                    onChange={(index) => setLocalReps(index)}
                    visibleRest={1}
                />
            </View>
            <Text style={styles.subtitle}>Reps</Text>
            <TextInput
                style={styles.input}
                placeholder="Peso (KG)"
                keyboardType="numeric"
                value={localWeight}
                onFocus={() => setIsInteracting(true)}
                onBlur={() => setIsInteracting(false)}
                onChangeText={setLocalWeight}
            />
            <TouchableOpacity style={styles.deleteIndicator} onPress={() => onDelete(index)}>
                <MaterialIcons name="chevron-left" size={24} color="black" />
            </TouchableOpacity>
        </Animated.View>
    );
};

const styles = StyleSheet.create({
    serieContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 5,
        backgroundColor: 'white',
        borderRadius: 5,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 2,
        padding: 10,
    },
    serieTitle: {
        flex: 1,
        fontSize: 16,
        fontWeight: 'bold',
        marginRight: 10,
    },
    subtitle: {
        fontSize: 16,
        marginLeft: 10,
    },
    input: {
        flex: 1,
        borderWidth: 1,
        borderColor: '#ccc',
        padding: 5,
        marginLeft: 10,
        borderRadius: 5,
        marginRight: 5,
    },
    deleteIndicator: {
        justifyContent: 'center',
        alignItems: 'center',
        padding: 10,
    },
});

export default Serie;
